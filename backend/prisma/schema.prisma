// Prisma schema file for NYSC Backend
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile       Profile?
  sessions      Session[]
  activities    ActivityLog[]
  refreshTokens RefreshToken[]
  newsArticles  NewsArticle[] @relation("AuthorRelation")
  events        Event[]       @relation("EventAuthorRelation")
  files         File[]        @relation("FileUploadRelation")

  // Indexes
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

enum Role {
  USER
  EDITOR
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

model Profile {
  id       String  @id @default(cuid())
  userId   String  @unique
  phone    String?
  address  String?
  city     String?
  district String?
  avatar   String?
  bio      String? @db.Text

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  sid       String   @unique
  data      Json
  expiresAt DateTime
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([sid])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String?
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?  @db.Text
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([resource])
  @@map("activity_logs")
}

// Content Management Models
model NewsArticle {
  id          String            @id @default(cuid())
  title       String
  slug        String            @unique
  content     String            @db.LongText
  excerpt     String?           @db.Text
  status      ContentStatus     @default(DRAFT)
  category    String?
  tags        String?           @db.Text // JSON array as string
  featured    Boolean           @default(false)
  publishedAt DateTime?
  authorId    String
  views       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  author User @relation("AuthorRelation", fields: [authorId], references: [id])

  // Indexes
  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([authorId])
  @@index([publishedAt])
  @@index([featured])
  @@map("news_articles")
}

model Event {
  id                     String        @id @default(cuid())
  title                  String
  slug                   String        @unique
  description            String        @db.Text
  content                String?       @db.LongText
  status                 ContentStatus @default(DRAFT)
  eventDate              DateTime
  endDate                DateTime?
  location               String?
  capacity               Int?
  currentParticipants    Int           @default(0)
  registrationRequired   Boolean       @default(false)
  registrationDeadline   DateTime?
  fee                    Decimal?      @db.Decimal(10, 2)
  currency               String        @default("LKR")
  featured               Boolean       @default(false)
  authorId               String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  // Relations
  author User @relation("EventAuthorRelation", fields: [authorId], references: [id])

  // Indexes
  @@index([slug])
  @@index([status])
  @@index([eventDate])
  @@index([authorId])
  @@index([featured])
  @@map("events")
}

model Program {
  id                   String        @id @default(cuid())
  name                 String
  slug                 String        @unique
  description          String        @db.Text
  duration             String?
  eligibility          String?       @db.Text
  applicationDeadline  DateTime?
  maxParticipants      Int?
  currentParticipants  Int           @default(0)
  fee                  Decimal?      @db.Decimal(10, 2)
  currency             String        @default("LKR")
  status               ContentStatus @default(DRAFT)
  featured             Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Indexes
  @@index([slug])
  @@index([status])
  @@index([featured])
  @@index([applicationDeadline])
  @@map("programs")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// File Management
model File {
  id           String   @id @default(cuid())
  originalName String
  fileName     String
  mimeType     String
  size         Int
  type         FileType
  path         String
  url          String?
  uploadedBy   String
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader User @relation("FileUploadRelation", fields: [uploadedBy], references: [id])

  // Indexes
  @@index([type])
  @@index([uploadedBy])
  @@index([createdAt])
  @@map("files")
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

// System Settings
model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  type        String   @default("string")
  description String?  @db.Text
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // Indexes
  @@index([key])
  @@map("settings")
}