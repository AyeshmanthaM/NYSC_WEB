// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id           String    @id @default(uuid())
  nic          String?   @unique
  email        String    @unique
  mobile       String?
  passwordHash String    @map("password_hash")
  role         Role      @relation(fields: [roleId], references: [id])
  roleId       Int       @map("role_id")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  newsArticles      NewsArticle[]
  programs          Program[]
  applications      Application[]
  reviewedApps      Application[] @relation("ReviewedApplications")
  comments          NewsComment[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]

  @@map("roles")
}

// News Management
model NewsCategory {
  id           String         @id @default(uuid())
  nameSi       String         @map("name_si")
  nameTa       String         @map("name_ta")
  nameEn       String         @map("name_en")
  slug         String         @unique
  description  String?
  parentId     String?        @map("parent_id")
  parent       NewsCategory?  @relation("CategoryTree", fields: [parentId], references: [id])
  children     NewsCategory[] @relation("CategoryTree")
  displayOrder Int            @default(0) @map("display_order")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")

  newsArticles NewsArticle[]

  @@map("news_categories")
}

model NewsArticle {
  id               String    @id @default(uuid())
  titleSi          String    @map("title_si")
  titleTa          String    @map("title_ta")
  titleEn          String    @map("title_en")
  slug             String    @unique
  excerptSi        String?   @map("excerpt_si")
  excerptTa        String?   @map("excerpt_ta")
  excerptEn        String?   @map("excerpt_en")
  contentSi        String    @map("content_si") @db.Text
  contentTa        String    @map("content_ta") @db.Text
  contentEn        String    @map("content_en") @db.Text
  featuredImage    String?   @map("featured_image")
  category         NewsCategory @relation(fields: [categoryId], references: [id])
  categoryId       String    @map("category_id")
  author           User      @relation(fields: [authorId], references: [id])
  authorId         String    @map("author_id")
  tags             String[]
  viewCount        Int       @default(0) @map("view_count")
  isFeatured       Boolean   @default(false) @map("is_featured")
  isPublished      Boolean   @default(false) @map("is_published")
  publishedAt      DateTime? @map("published_at")
  metaTitle        String?   @map("meta_title")
  metaDescription  String?   @map("meta_description") @db.Text
  metaKeywords     String?   @map("meta_keywords")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  comments    NewsComment[]
  articleTags NewsArticleTag[]

  @@index([slug])
  @@index([categoryId])
  @@index([authorId])
  @@index([publishedAt])
  @@map("news_articles")
}

model NewsTag {
  id         String    @id @default(uuid())
  nameSi     String    @map("name_si")
  nameTa     String    @map("name_ta")
  nameEn     String    @map("name_en")
  slug       String    @unique
  usageCount Int       @default(0) @map("usage_count")

  articleTags NewsArticleTag[]

  @@map("news_tags")
}

model NewsArticleTag {
  article   NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String      @map("article_id")
  tag       NewsTag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String      @map("tag_id")

  @@id([articleId, tagId])
  @@map("news_article_tags")
}

model NewsComment {
  id         String    @id @default(uuid())
  article    NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  String    @map("article_id")
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id")
  parentId   String?   @map("parent_id")
  parent     NewsComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    NewsComment[] @relation("CommentReplies")
  content    String    @db.Text
  isApproved Boolean   @default(false) @map("is_approved")
  createdAt  DateTime  @default(now()) @map("created_at")

  @@map("news_comments")
}

// Programs and Training
model Program {
  id              String    @id @default(uuid())
  titleSi         String    @map("title_si")
  titleTa         String    @map("title_ta")
  titleEn         String    @map("title_en")
  descriptionSi   String    @map("description_si") @db.Text
  descriptionTa   String    @map("description_ta") @db.Text
  descriptionEn   String    @map("description_en") @db.Text
  programType     String    @map("program_type")
  startDate       DateTime  @map("start_date")
  endDate         DateTime  @map("end_date")
  location        String
  maxParticipants Int?      @map("max_participants")
  status          String
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     String    @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  applications Application[]

  @@map("programs")
}

model Application {
  id              String    @id @default(uuid())
  applicationType String    @map("application_type")
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @map("user_id")
  program         Program?  @relation(fields: [programId], references: [id])
  programId       String?   @map("program_id")
  status          String
  applicationData Json      @map("application_data")
  submittedAt     DateTime? @map("submitted_at")
  reviewedBy      User?     @relation("ReviewedApplications", fields: [reviewedById], references: [id])
  reviewedById    String?   @map("reviewed_by")
  reviewedAt      DateTime? @map("reviewed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("applications")
}

model TrainingCenter {
  id             String   @id @default(uuid())
  nameSi         String   @map("name_si")
  nameTa         String   @map("name_ta")
  nameEn         String   @map("name_en")
  district       District @relation(fields: [districtId], references: [id])
  districtId     Int      @map("district_id")
  address        String   @db.Text
  contactNumber  String   @map("contact_number")
  email          String?
  coursesOffered Json     @map("courses_offered")
  facilities     Json?
  status         String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("training_centers")
}

// Location Management
model District {
  id   Int    @id @default(autoincrement())
  name String @unique

  divisions       Division[]
  trainingCenters TrainingCenter[]

  @@map("districts")
}

model Division {
  id         Int      @id @default(autoincrement())
  name       String
  district   District @relation(fields: [districtId], references: [id])
  districtId Int      @map("district_id")

  gnDivisions GNDivision[]

  @@map("divisions")
}

model GNDivision {
  id         Int      @id @default(autoincrement())
  name       String
  code       String   @unique
  division   Division @relation(fields: [divisionId], references: [id])
  divisionId Int      @map("division_id")

  @@map("gn_divisions")
}

// System
model AuditLog {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @map("user_id")
  action     String
  resource   String
  resourceId String?  @map("resource_id")
  changes    Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model Document {
  id           String   @id @default(uuid())
  title        String
  description  String?
  fileName     String   @map("file_name")
  filePath     String   @map("file_path")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  category     String
  uploadedBy   String   @map("uploaded_by")
  downloadCount Int     @default(0) @map("download_count")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("documents")
}

model Notification {
  id         String   @id @default(uuid())
  type       String
  title      String
  message    String   @db.Text
  data       Json?
  userId     String?  @map("user_id")
  isRead     Boolean  @default(false) @map("is_read")
  readAt     DateTime? @map("read_at")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}