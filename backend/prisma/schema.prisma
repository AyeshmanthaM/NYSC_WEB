// Translation Management Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(TRANSLATOR)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  translationEdits TranslationAudit[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  TRANSLATOR
  VIEWER
}

// Core translation model
model Translation {
  id        String   @id @default(uuid())
  namespace String   // e.g., 'header', 'footer', 'common'
  key       String   // e.g., 'empoweringYouth', 'quickLinks'
  language  String   // 'en', 'si', 'ta'
  value     String   // The translated text
  version   Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  versions TranslationVersion[]
  audits   TranslationAudit[]

  // Ensure unique combination of namespace, key, and language
  @@unique([namespace, key, language])
  @@map("translations")
}

// Translation versioning for rollback capability
model TranslationVersion {
  id            String   @id @default(uuid())
  translationId String
  version       Int
  value         String
  createdAt     DateTime @default(now())
  createdBy     String?

  // Relations
  translation Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)

  @@unique([translationId, version])
  @@map("translation_versions")
}

// Audit trail for all translation changes
model TranslationAudit {
  id            String     @id @default(uuid())
  translationId String
  action        AuditAction
  oldValue      String?
  newValue      String?
  userId        String
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime   @default(now())

  // Relations
  translation Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])

  @@map("translation_audits")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  PUBLISH
  UNPUBLISH
}

// Translation import/export jobs
model TranslationJob {
  id         String    @id @default(uuid())
  type       JobType
  status     JobStatus @default(PENDING)
  fileName   String?
  totalItems Int?
  processed  Int       @default(0)
  errors     Json?
  result     Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String

  @@map("translation_jobs")
}

enum JobType {
  IMPORT
  EXPORT
  SYNC
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// Translation namespaces configuration
model TranslationNamespace {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("translation_namespaces")
}